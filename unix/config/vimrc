set nocompatible
filetype off

set shell=bash

syntax on

setlocal ignorecase " ignore case when searching
setlocal smartcase " when searching try to be smart about cases

" Tweaks for file browsing
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" master fucking undo
nnoremap <F5> :UndotreeToggle<CR>

" backup files
set noswapfile

colorscheme railscasts

au BufReadPost .env.* set syntax=sh
au BufReadPost *.conf set syntax=conf

" Make it obvious where 65 characters is on text files
autocmd BufRead,BufNewFile *.md set textwidth=65
set colorcolumn=+1

" remap 0 in normal mode to go to the beginning of the text line
nmap 0 ^
nmap - ^

if executable('ag')
  " Use ag over grep
  let g:ackprg = 'ag --vimgrep --smart-case'
endif

" because I misstype AG quite often
cnoreabbrev ag Ack
cnoreabbrev aG Ack
cnoreabbrev Ag Ack
cnoreabbrev AG Ack

" navigate through panes with ctrl + hjkl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Automatically wrap at 72 characters and spell check git commit messages
autocmd FileType gitcommit setlocal textwidth=72
autocmd FileType gitcommit setlocal spell
" activate spell checking on Markdown files
autocmd BufRead,BufNewFile *.md setlocal spell
" enable word autocompletion
set complete+=kspell

au BufRead,BufNewFile *.hbs setfiletype html
au BufRead,BufNewFile *.es6 setfiletype javascript
au BufRead,BufNewFile *.jbuilder setfiletype ruby
au BufRead,BufNewFile *.eex setfiletype eelixir
au BufRead,BufNewFile *.exs setfiletype eelixir

let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'active': {
      \   'left': [
      \     ['mode'],
      \     ['gitbranch'] ],
      \   'right': [
      \     ['lineinfo'],
      \     ['percent'],
      \     ['fileencoding', 'gitgutter', 'filetype'] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'LightlineBranchStatus',
      \   'mode': 'LightlineMode',
      \   'filetype': 'LightlineFiletype',
      \   'gitgutter': 'MyGitGutter' }
      \ }

function! LightlineMode()
  return mode() ==# 'n' ? (expand('%:t') !=# '' ? expand('%:t') : '[No Name]') : lightline#mode()
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineBranchStatus()
  return FugitiveHead(6)
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif

  let symbols = [
        \ g:gitgutter_sign_added . '',
        \ g:gitgutter_sign_modified . '',
        \ g:gitgutter_sign_removed . ''
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []

  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor

  return join(ret, '')
endfunction
